{"name":"FluentTypeScanner","tagline":"FluentTypeScanner is a .NET library used for scanning assemblies for implementations of defined types using several different scanning strategies.","body":"FluentTypeScanner\r\n=================\r\n\r\nProject Homepage: https://github.com/randyburden/FluentTypeScanner\r\n\r\nAvailable on NuGet as well: http://www.nuget.org/packages/FluentTypeScanner/\r\n\r\n###Description:###\r\n\r\nFluentTypeScanner is a .NET library used to scan for types using various scanning strategies expressed in a fluent-based declarative syntax.\r\n\r\nFluentTypeScanner was originally developed as a tool to assist in creating extensible modular software by allowing software authors to scan\r\nfor types implementing their libraries interfaces, classes, attributes, etc. using a fluent-based declarative syntax.\r\n\r\n###What is it?###\r\n\r\nFluentTypeScanner is a library to assist you in scanning for various types. It's fluent-based declarative syntax allows you to define which\r\ntypes you wish to scan for, how to scan for them ( the scanning strategy ), and what to do with the types once they are found.\r\n\r\nWhen making modular software with support for third party extensibility, you could expose a class in which the third party library can inherit \r\nfrom and then at runtime the application can scan for types that inherit the class and load in the new functionality allowing the core application\r\nto be extended in new ways. FluentTypeScanner provides one way to scan for those types. It doesn't do any kind of crazy magic or new tricks that\r\nyou haven't seen before; it simply provides a nice syntax for declaring what to scan for, how to scan, and what to do once a match has been found.\r\n\r\n###Example Usage:###\r\n\r\n####Example 1 ( Scanning for types that are decorated with a specified attribute ):####\r\n\r\n```csharp\r\nFluentTypeScanner.TypeScanner.Configure( x =>\r\n    {\r\n        x.For<MyExtensibilityAttribute>() // Specify the type to scan for\r\n            .ScanForTypesThatAreDecoratedWithThisAttribute() // Specify the scanning strategy\r\n            .Do( type => Trace.WriteLine( type ) ); // Specify what action to perform\r\n                    \r\n        x.Scan(); // Scan for the types\r\n    } );\r\n```\r\n\r\n####Example 2 ( Scanning for types that implement a given interface ):####\r\n```csharp\r\npublic static List<IModule> ScanForExtensibilityInterfaces()\r\n{\r\n    List<IModule> modules = new List<IModule>();\r\n\r\n    FluentTypeScanner.TypeScanner.Configure( x =>\r\n        {\r\n            x.For<IModule>().ScanForTypesThatImplementThisInterface()\r\n                .Do( type =>\r\n                    {\r\n                        try\r\n                        {\r\n                            var instance = Activator.CreateInstance( type ) as IModule;\r\n\r\n                            modules.Add( instance );\r\n                        }\r\n                        catch ( Exception e )\r\n                        {\r\n                            string msg = string.Format( \"An error occurred instantiating type {0} while scanning for extensibility interfaces.\", type.FullName );\r\n\r\n                            throw new Exception( msg, e );\r\n                        }\r\n                    } );\r\n\r\n            x.Scan();\r\n        } );\r\n\r\n    return modules;\r\n}\r\n```\r\n\r\nCheck out the unit tests for more examples.\r\n\r\n###MIT License:###\r\n\r\nCopyright (c) 2013, Randy Burden ( http://randyburden.com ) All rights reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \r\nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, \r\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS \r\nIN THE SOFTWARE.\r\n","google":"UA-46622742-1","note":"Don't delete this file! It's used internally to help with page regeneration."}